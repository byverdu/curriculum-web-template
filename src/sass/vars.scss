// Variables
$black: #282a36;
$grey: #6272a4;
$grey-2: #44475a;
$white: #f8f8f2;
$cyan: #8be9fd;
$green: #50fa7b;
$orange: #ffb86c;
$pink:   #ff79c6;
$purple:   #bd93f9;
$red:   #ff5555;
$yellow:   #f1fa8c;
$gutter: 15px;
$img-path: '../images/';
$devMe: me, email, telephone, address;
$devIcons: github, npm, web, linkedin;
$divider: '#{$img-path}divider.svg';

$breakpoints: (
  'small':  767px,
  'medium': 992px,
  'large':  1200px
) !default;

// Mixins
@mixin breakpoint($breakpoint) {
  // If the key exists in the map
  @if map-has-key($breakpoints, $breakpoint) {
    // Prints a media query based on the value
    @media (min-width: map-get($breakpoints, $breakpoint)) {
      @content;
    }
  }
 
  // If the key doesn't exist in the map
  @else {
    @warn "Unfortunately, no value could be retrieved from `#{$breakpoint}`. "
        + "Available breakpoints are: #{map-keys($breakpoints)}.";
  }
}

@mixin before-pseudo-element($icon, $size, $color) {
  &::before {
    content: '';
    background-image: url(#{$img-path}#{$icon}.svg?fill=%23fff);
    width: #{$size}px;
    height: #{$size}px;
    margin-right: 10px;
  }
}

@mixin list-icon-generator($icons, $size, $color) {
  li {
    display: flex;
    align-items: center;
    line-height: #{$size}px;
    padding: 5px 0;

    @if length($icons) > 1 {

      $i: 1;
      @each $icon in $icons {
        &:nth-child(#{$i}) {
          @include before-pseudo-element($icon, $size, $color);
        }
        $i: $i + 1;
      }
    } @else {
      @include before-pseudo-element($icons, $size, $color);
    }
  }
}

$prism-themes: (
  dracula: (
    'bg': $black,
    'text-color': $white,
    'bg-btn': $red,
    'title-color': $green,
    'title-color-2': $orange,
  ),
  prism: (
    'bg': #f5f2f0,
    'text-color': #000,
    'bg-btn': #905,
    'title-color': #690,
    'title-color-2': #07a,
  ),
  coy: (
    'bg': #fdfdfd,
    'text-color': #000,
    'bg-btn': #c92c2c,
    'title-color': #2f9c0a,
    'title-color-2': #1990b8,
  )
) !default;

@function get-theme-values($theme, $prop) {
  @return map-get(map-get($prism-themes, $theme), $prop);
}